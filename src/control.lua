-- control: replace fluid-product recipes with their quality-leveled counterparts

local shared = require("shared")

-- memoize recipes with fluid products

local recipes_with_fluid_products = {}

for recipe_name, recipe in pairs(prototypes.recipe) do
  -- ignore recipes generated by this mod
  if not shared.is_generated_recipe(recipe_name) then
    local fluid_products = shared.fluid_products_for_recipe(recipe.products)
    -- ignore recipes without fluid products
    if fluid_products then
      recipes_with_fluid_products[recipe_name] = fluid_products
    end
  end
end

-- set up and register on_tick event handler

function on_tick_assembling_machine(machine, bonus_per_quality_level)
  local recipe, quality = machine.get_recipe()
  if recipe and quality then
    if recipe.enabled then
      local fluid_products = recipes_with_fluid_products[recipe.name]
      if fluid_products then
        local new_recipe_name = shared.generated_recipe_name(recipe, quality)
        machine.set_recipe(new_recipe_name, quality)
      end
    end
  end
end

function on_tick_surface(surface)
  local assembling_machines = surface.find_entities_filtered{
    type = "assembling-machine"
  }
  for _, machine in ipairs(assembling_machines) do
    on_tick_assembling_machine(machine)
  end
end

script.on_event(defines.events.on_tick,
  function(event)
    for _, surface in pairs(game.surfaces) do
      on_tick_surface(surface)
    end
  end
)
